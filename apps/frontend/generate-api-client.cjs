const shelljs = require('shelljs');
const fs = require('fs');
const filename = './src/api-openapi-spec.json';
const path = require('path');

async function generateApiClient() {
  if (fs.existsSync(filename)) {
    const startTime = new Date().getTime();
    shelljs.exec('pnpm exec orval --config ./orval.config.cjs');
    const endTime = new Date().getTime();
    const generationDuration = endTime - startTime;
    await deleteAnyOldGeneratedFiles(generationDuration);
  } else {
    console.error('error: ' + filename + ' not found - please start the backend api server in dev mode first');
  }
}

async function recursivelyGetFiles(dir) {
  const dirContents = fs.readdirSync(dir, { withFileTypes: true });
  const files = await Promise.all(
    dirContents.map(async (dirent) => {
      const res = path.resolve(dir, dirent.name);
      return dirent.isDirectory() ? recursivelyGetFiles(res) : { file: res, stat: fs.lstatSync(res) };
    })
  );
  return [].concat(...files);
}

async function deleteAnyOldGeneratedFiles(generationDuration) {
  const statsAndFiles = (await recursivelyGetFiles('./src/__generated__')).filter((statAndFile) => {
    return statAndFile.stat.isFile();
  });
  const newestMTime = Math.max(...statsAndFiles.map((statAndFile) => statAndFile.stat.mtime));
  const oldFileStats = statsAndFiles.filter((statAndFile) => {
    // if the file is older than the generationDuration time + 5 seconds (to be safe)
    // delete it because it wasn't generated by the most recent run
    return statAndFile.stat.mtime < newestMTime - (generationDuration + 5000);
  });
  oldFileStats.forEach(({ file }) => {
    console.log('deleting old file: ', file);
    fs.unlinkSync(file);
  });
}

void generateApiClient();
